{"version":3,"file":"static/js/72.51b4dae4.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  input {\r\n    margin-bottom: 14px;\r\n  }\r\n`;\r\n","\r\n\r\nimport React, { useState } from 'react';\r\nimport { Form } from './ContactForm.styled';\r\nimport { useAddContactMutation, useFetchContactsQuery } from '../../services/contactsApi';\r\nimport { Button } from '@chakra-ui/react';\r\nimport Notiflix from 'notiflix';\r\n\r\nexport const ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const { data: contacts, refetch } = useFetchContactsQuery();\r\n  const [addContact, { isLoading }] = useAddContactMutation();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const searchResult = Array.isArray(contacts)\r\n      ? contacts.find(\r\n          contact => contact.name.toLowerCase() === name.toLowerCase()\r\n        )\r\n      : null;\r\n\r\n    if (searchResult) {\r\n      Notiflix.Notify.failure(`${name} is already in contacts`);\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await addContact({ name, number }).unwrap();\r\n      Notiflix.Notify.success('Contact added successfully');\r\n      setName('');\r\n      setNumber('');\r\n      refetch(); // Обновление списка контактов\r\n    } catch (error) {\r\n      Notiflix.Notify.failure('Failed to add contact. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"inputName\">Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        id=\"inputName\"\r\n        required\r\n        onChange={e => setName(e.target.value)}\r\n      />\r\n      <label htmlFor=\"inputNumber\">Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        value={number}\r\n        id=\"inputNumber\"\r\n        required\r\n        onChange={e => setNumber(e.target.value)}\r\n      />\r\n      <Button colorScheme=\"blue\" size=\"sm\" type=\"submit\" isLoading={isLoading}>\r\n        Add contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n\r\n  button {\r\n    padding: 0 10px;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Item } from './Contact.styled';\r\nimport { useDeleteContactMutation } from '../../services/contactsApi';\r\nimport { Button } from '@chakra-ui/react';\r\nimport Notiflix from 'notiflix';\r\n\r\nexport function Contact({ contact, refetchContacts }) {\r\n  const { _id, name, number } = contact;\r\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\r\n\r\n  const handleDeleteContact = async () => {\r\n    try {\r\n      console.log(`Attempting to delete contact with ID: ${_id}`);\r\n      await deleteContact(_id).unwrap();\r\n      Notiflix.Notify.success('Contact deleted');\r\n      refetchContacts(); // Обновление данных после удаления\r\n    } catch (error) {\r\n      Notiflix.Notify.failure('Failed to delete contact');\r\n      console.error('Error deleting contact:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Item>\r\n      <p>\r\n        {name} : {number}\r\n      </p>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        size=\"xs\"\r\n        type=\"button\"\r\n        onClick={handleDeleteContact}\r\n        isLoading={isLoading}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </Item>\r\n  );\r\n}\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.shape({\r\n    _id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  refetchContacts: PropTypes.func.isRequired, \r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const selectFilter = state => state.filter;\r\nexport const selectIsLoading = state => state.contacts.isLoading;\r\nexport const selectError = state => state.contacts.error;\r\nexport const selectContacts = state => state.contacts.items;\r\n\r\nexport const selectVisibleContacts = createSelector(\r\n  [selectContacts, selectFilter],\r\n\r\n  (contacts, filterValue) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filterValue.toLowerCase(), 0)\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Contact } from '../../components/Contact/Contact';\r\nimport { Item } from 'components/Contact/Contact.styled';\r\nimport { useFetchContactsQuery } from 'services/contactsApi';\r\nimport { selectFilter } from 'redux/selectors';\r\nimport { Loader } from 'components/Loader/Loader';\r\n\r\nexport function ContactList() {\r\n  const filter = useSelector(selectFilter);\r\n  const { data: contacts, error, isLoading, refetch } = useFetchContactsQuery();\r\n\r\n  const getVisibleContacts = (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  const visibleContacts = contacts ? getVisibleContacts(contacts, filter) : [];\r\n\r\n  if (isLoading) return <Loader />;\r\n  if (error) return <p>Error loading contacts: {error.message}</p>;\r\n\r\n  return (\r\n    <ul>\r\n      {visibleContacts.length === 0 && <Item>No contacts for your search</Item>}\r\n      {visibleContacts.length > 0 &&\r\n        visibleContacts.map(item => (\r\n          <Contact key={item._id} contact={item} refetchContacts={refetch} />\r\n        ))}\r\n    </ul>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const FilterDiv = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: baseline;\r\n  margin-bottom: 14px;\r\n`;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setFilter } from 'redux/filterSlice';\r\nimport { selectFilter } from 'redux/selectors';\r\nimport { FilterDiv } from './Filter.styled';\r\n\r\nexport const Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(selectFilter);\r\n\r\n  const handleChange = (e) => {\r\n    dispatch(setFilter(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <FilterDiv>\r\n      <label>Find by name:</label>\r\n      <input\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter name\"\r\n      />\r\n    </FilterDiv>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactDiv = styled.div`\r\n  margin: 20px auto 0 auto;\r\n  background-color: #f4f6f7;\r\n  max-width: 600px;\r\n  height: 100%;\r\n  padding: 20px 100px;\r\n  border-radius: 6px;\r\n\r\n  h1 {\r\n    text-align: center;\r\n    font-size: 32px;\r\n  }\r\n\r\n  h2 {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    margin-top: 20px;\r\n    margin-bottom: 16px;\r\n  }\r\n  p {\r\n    text-align: center;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { ContactForm } from 'components/ContactForm/ContactForm';\r\nimport { ContactList } from 'components/ContactList/ContactList';\r\nimport { Filter } from 'components/Filter/Filter';\r\nimport { Loader } from 'components/Loader/Loader';\r\nimport { useFetchContactsQuery } from 'services/contactsApi';\r\nimport { ContactDiv } from './Contacts.styled';\r\n\r\nconst Contacts = () => {\r\n  const { data: contacts, error, isLoading } = useFetchContactsQuery();\r\n\r\n  return (\r\n    <ContactDiv>\r\n      <h1>Phonebook</h1>\r\n      <p>Add contact name & phone:</p>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      {error && <b>Error: {error.message}</b>}\r\n      {isLoading && <Loader />}\r\n      {contacts && <ContactList />}\r\n    </ContactDiv>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n"],"names":["Form","styled","form","_templateObject","_taggedTemplateLiteral","ContactForm","name","setName","useState","number","setNumber","data","contacts","refetch","useFetchContactsQuery","addContact","isLoading","useAddContactMutation","_jsxs","onSubmit","async","e","preventDefault","Array","isArray","find","contact","toLowerCase","Notiflix","failure","concat","unwrap","success","error","children","_jsx","htmlFor","type","value","id","required","onChange","target","Button","colorScheme","size","Item","li","Contact","_ref","refetchContacts","_id","deleteContact","useDeleteContactMutation","onClick","console","log","selectFilter","state","filter","createSelector","items","filterValue","includes","ContactList","useSelector","visibleContacts","getVisibleContacts","Loader","message","length","map","item","FilterDiv","div","Filter","dispatch","useDispatch","setFilter","placeholder","ContactDiv","Contacts"],"sourceRoot":""}